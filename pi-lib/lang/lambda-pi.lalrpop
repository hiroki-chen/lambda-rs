//! This `lalrpop` file defines the syntax of a domain specific language which is used to
//! generate a parser that can be used to do lambda calculus interpretation.

grammar;

use crate::ast::*;

match {
    r"(def)",
    r"(eval)",
    r"(let)",
    r"(forall)|(∀)",
    r"i8",
    r"i16",
    r"i32",
    r"i64",
    r"u8",
    r"u16",
    r"u32",
    r"u64",
    r"f32",
    r"f64",
    r"(Type)|(U)",
    r"(bool)|(boolean)",
    r"(str)|([sS]tring)",
    r"(lambda)|(\\)|(λ)",
    r"(Nat)|(ℕ)",
    r"(S)|(Succ)",
} else {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Identifier,
} else {
    _,
}

#[inline]
ForallList<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Cmd: Statement = {
    <t: Def> <id: Identifier> "::" <e: Expr> ";" =>
        Statement::Declare(id.to_string(), *e),
    <e: Eval> <what: Term> ";" =>
        Statement::Eval(*what),
    <l: Let> <id: Identifier> ":=" <e: Expr> ";" =>
        Statement::Let(id.to_string(), *e),
}

pub ForallBinding: Box<AstNode> = {
    "(" <id: Identifier> ":" <ty: Expr> ")" => Box::new(AstNode::AnnotatedTerm {
        term: Box::new(AstNode::Var(id.to_string())),
        ty,
    }),
}

pub Term: Box<AstNode> = {
    "(" <e: Expr> ")" => e,
    r"(O)|(Zero)" => Box::new(AstNode::Num(0)),
    <n: Num> => Box::new(AstNode::Num(n)),
    <id: Identifier> => Box::new(AstNode::Var(id.to_string())),
    r"(Nat)|(ℕ)" => Box::new(AstNode::Nat),
    r"(Type)|(U)" => Box::new(AstNode::Universe),
}

pub Expr: Box<AstNode> = {
    #[precedence(level="0")]
    <t: Term> => t,
    #[precedence(level="1")]
    r"(S)|(Succ)" <e: Expr> => Box::new(AstNode::Succ(e)),
    #[precedence(level="2")] #[assoc(side="left")]
    <e1: Expr> <e2: Expr> => Box::new(AstNode::App {
        clos: e1,
        arg: e2,
    }),

    #[precedence(level="3")]
    <lambda: Lambda> <id: Identifier> "->" <e: Expr> =>
        Box::new(AstNode::Lambda {
            arg: id.to_string(),
            body: e,
        }),
    #[precedence(level="4")] #[assoc(side="right")]
    <t1: Expr> "->" <t2: Expr> => Box::new(AstNode::DependentFunctionSpace {
        arg: t1,
        ret: t2,
    }),
    #[precedence(level="5")] #[assoc(side="right")]
    <forall: Forall> <bindings: ForallList<ForallBinding>> "." <e: Expr> => Box::new(AstNode::Forall {
        args: bindings,
        ret: e,
    }),
    #[precedence(level="6")] #[assoc(side="right")]
    <t: Expr> "::" <e: Expr> => Box::new(AstNode::AnnotatedTerm {
        term: t,
        ty: e,
    })
}

// def.
Def: String = <s:r"(def)"> => s.into();
// eval
Eval: String = <s:r"(eval)"> => s.into();
// Let
Let: String = <s:r"(let)"> => s.into();
// Lambda
Lambda: String = <s:r"(lambda)|(\\)|(λ)"> => s.into();
Forall: String = <s:r"(forall)|(∀)"> => s.into();
Num: usize = <n:r"[0-9]|[1-9]+[0-9]*"> => n.parse().unwrap();
