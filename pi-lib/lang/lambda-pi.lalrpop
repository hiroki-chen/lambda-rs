//! This `lalrpop` file defines the syntax of a domain specific language which is used to
//! generate a parser that can be used to do lambda calculus interpretation.

grammar;

use crate::ast::*;

match {
    r"(?i)(type)",
    r"(?i)(eval)",
    r"i8",
    r"i16",
    r"i32",
    r"i64",
    r"u8",
    r"u16",
    r"u32",
    r"u64",
    r"f32",
    r"f64",
    r"U",
    r"(bool)|(boolean)",
    r"(str)|([sS]tring)",
    r"(lambda|\\|λ)",
    r"Nat",
    r"(S)|(Succ)",
} else {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => Identifier,
} else {
    _,
}

#[inline]
Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Cmd: Statement = {
    <t: Type> <id: Identifier> "::" <e: Ast> ";" =>
        Statement::Declare(id.to_string(), *e),
    <e: Eval> "(" <what: Ast> ")" ";" =>
        Statement::Eval(*what),
}

pub Ast: Box<AstNode> = {
    #[precedence(level="0")]
    r"(S)|(Succ)" <e: Ast> => Box::new(AstNode::Succ(e)),
    #[precedence(level="0")]
    r"U" => Box::new(AstNode::Universe),
    #[precedence(level="0")]
    r"O" => Box::new(AstNode::Num(0)),
    #[precedence(level="0")]
    <s: r"[0-9]+"> => Box::new(AstNode::Num(s.parse().unwrap())),
    #[precedence(level="0")]
    r"Nat" => Box::new(AstNode::Nat),

    #[precedence(level="0")]
    <id: Identifier> => Box::new(AstNode::Var(id.to_string())),
    #[precedence(level="1")] #[assoc(side="right")]
    <t1: Ast> "->" <t2: Ast> => Box::new(AstNode::DependentFunctionSpace {
        arg: t1,
        ret: t2,
    }),
    #[precedence(level="2")]
    <lambda: Lambda> <id: Identifier> "->" <e: Ast> =>
        Box::new(AstNode::Lambda {
            arg: id.to_string(),
            body: e,
        }),

    #[precedence(level="3")] #[assoc(side="left")]
    <t: Ast> "::" <e: Ast> => Box::new(AstNode::AnnotatedTerm {
        term: t,
        ty: e,
    }),
    #[precedence(level="4")] #[assoc(side="left")]
    "(" <e1: Ast> ")" <e2: Ast> => Box::new(AstNode::App {
        clos: e1,
        arg: e2,
    }),
}

// type.
Type: String = <s:r"(?i)(type)"> => s.into();
// eval
Eval: String = <s:r"(?i)(eval)"> => s.into();
// Lambda
Lambda: String = <s:r"(lambda|\\|λ)"> => s.into();
